* Arguments for other jupyter-python source blocks
#+PROPERTY: header-args:jupyter-python :session notebook-session
#+PROPERTY: header-args:jupyter-python+ :async yes

* Emacs Org-Mode with Jupyter Python

See [[https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-python.html][Python Source Code Blocks in Org Mode]]

- Run Emacs in a conda environment
- If you get error =No org-babel-execute function for jupyter-python=, reload this org file and to read the properties in the org file
- If you get error =Jupyter REST API error: 404, "Not found"=, downgrade jupyter-server to 1.23.4 per https://github.com/emacs-jupyter/jupyter/issues/500


** Check Python Executable being used

Make sure python executable is in the virtual environment for this project

#+begin_src python
    import sys
    return sys.executable
#+end_src

#+RESULTS:
: /home/justin/.conda/envs/data-science/bin/python


** Jupyter Notebook Style

#+begin_src jupyter-python
print('Hello, world!')
#+end_src

#+RESULTS:
: Hello, world!

*** Code Images

#+begin_src jupyter-python :file jupyter-in-org-matplot.png
import matplotlib.pyplot as plt
fig, ax = plt.subplots()
ax.plot([1, 2, 3, 4], [1, 4, 2, 10])
pass
#+end_src

#+RESULTS:
[[file:jupyter-in-org-matplot.png]]


#+begin_src python :results file link
    import matplotlib, numpy
    matplotlib.use('Agg')
    import matplotlib.pyplot as plt
    fig=plt.figure(figsize=(4,2))
    x=numpy.linspace(-15,15)
    plt.plot(numpy.sin(x)/x)
    fig.tight_layout()
    plt.savefig('jupyter-in-org-python-matplot-fig.png')
    # return filename to org-mode
    return 'jupyter-in-org-python-matplot-fig.png'
#+end_src

#+RESULTS:
[[file:jupyter-in-org-python-matplot-fig.png]]

#+name: savefig
#+begin_src python :var figname="plot.svg" width=5 height=5 :exports none
  return f"""plt.savefig('{figname}', width={width}, height={height})
  '{figname}'"""
#+end_src

#+header: :noweb strip-export
#+begin_src python :results value file link :session :exports both
  import matplotlib, numpy
  import matplotlib.pyplot as plt
  fig=plt.figure(figsize=(4,2))
  x=numpy.linspace(-15,15)
  plt.plot(numpy.sin(x)/x)
  fig.tight_layout()
  <<savefig(figname="jupyter-in-org-plot.png", width=10, height=5)>>
#+end_src

#+RESULTS:
[[file:]]

** Regular Evaluation

#+begin_src python :results values
def foo(x):
  if x>0:
    return x+1

  else:
    return x-1

return foo(5)
#+end_src

#+RESULTS:
: 6

*** Pandas DataFrame to Org

#+name: pd2org
#+begin_src python :var df="df" :exports none
  import tabulate
  return f"return tabulate({df}, headers={df}.columns, tablefmt='orgtbl')"
#+end_src

#+header: :prologue from tabulate import tabulate
#+header: :noweb strip-export
#+begin_src python :results value raw :exports both
  import pandas as pd
  df = pd.DataFrame({
      "a": [1,2,3],
      "b": [4,5,6]
  })
  <<pd2org("df")>>
#+end_src

#+RESULTS:
|   | a | b |
|---+---+---|
| 0 | 1 | 4 |
| 1 | 2 | 5 |
| 2 | 3 | 6 |

*** Data Tables

#+tblname: data_table
| a | 1 |
| b | 2 |
| c | 3 |
#+begin_src python :var val=1 :var data=data_table
# Return row specified by val.
# In non-session mode, use return to return results.
return(data[val])
#+end_src

#+RESULTS:
| b | 2 |
